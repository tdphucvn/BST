class Node:
    def __init__(self, value):
        self.value = value  # the value which is stored in the node
        self.left = None  # node with smaller value
        self.right = None  # node with higher value


class BinarySearchTree:
    visitedNodesCounter = 1

    def __init__(self):
        self.root = None

    def insert(self, value):
        insertedNode = Node(value)
        placeFound = False
        if(self.root == None):
            self.root = insertedNode
        elif (self.root.value > insertedNode.value):
            previousNode = self.root
            currentNode = self.root.left
            direction = ''
            while not placeFound:
                if(currentNode == None):
                    if(direction == 'right'):
                        previousNode.right = insertedNode
                    else:
                        previousNode.left = insertedNode
                    return

                if(currentNode.value > insertedNode.value):
                    previousNode = currentNode
                    currentNode = previousNode.left
                    direction = 'left'
                else:
                    previousNode = currentNode
                    currentNode = previousNode.right
                    direction = 'right'
        else:
            previousNode = self.root
            currentNode = self.root.right
            direction = ''
            while not placeFound:
                if(currentNode == None):
                    if(direction == 'left'):
                        previousNode.left = insertedNode
                    else:
                        previousNode.right = insertedNode
                    return

                if(currentNode.value > insertedNode.value):
                    previousNode = currentNode
                    currentNode = previousNode.left
                    direction = 'left'
                else:
                    previousNode = currentNode
                    currentNode = previousNode.right
                    direction = 'right'

    def fromArray(self, array):
        innerArray = array
        for item in innerArray:
            self.insert(item)

    def search(self, value):
        valueOfNode = value
        nodeFounded = False
        currentNode = self.root
        if(currentNode == None):
            self.visitedNodesCounter = 0
            return False
        while not nodeFounded:
            if (currentNode == None):
                self.visitedNodesCounter -= 1
                return False
            if (currentNode.value == valueOfNode):
                return True
            elif(currentNode.value > valueOfNode):
                previousNode = currentNode
                currentNode = previousNode.left
                self.visitedNodesCounter += 1
            else:
                previousNode = currentNode
                currentNode = previousNode.right
                self.visitedNodesCounter += 1

    def min(self):
        currenNode = self.root
        minFounded = False
        if(currenNode == None):
            return None
        while not minFounded:
            previousNode = currenNode
            currenNode = previousNode.left
            self.visitedNodesCounter += 1
            if (currenNode == None):
                self.visitedNodesCounter -= 1
                return previousNode.value

    def max(self):
        currenNode = self.root
        minFounded = False
        if(currenNode == None):
            return None
        while not minFounded:
            previousNode = currenNode
            currenNode = previousNode.right
            self.visitedNodesCounter += 1
            if (currenNode == None):
                self.visitedNodesCounter -= 1
                return previousNode.value

    def visitedNodes(self):
        nodes = self.visitedNodesCounter
        self.visitedNodesCounter = 1
        return nodes


def main():
    print("----------------------------First input----------------------------")

    bst1 = BinarySearchTree()

    print(bst1.search(10))
    print(bst1.visitedNodes())
    print(bst1.min())
    print(bst1.max())

    print("----------------------------Second input----------------------------")

    bst2 = BinarySearchTree()
    bst2.fromArray([5, 3, 1, 4, 7, 6, 8])

    print(bst2.search(5))
    print(bst2.visitedNodes())
    print(bst2.search(7))
    print(bst2.visitedNodes())
    print(bst2.search(6))
    print(bst2.visitedNodes())
    print(bst2.search(10))
    print(bst2.visitedNodes())
    print("MIN: " + str(bst2.min()))
    print(bst2.visitedNodes())
    print("MAX: " + str(bst2.max()))
    print(bst2.visitedNodes())

    print("----------------------------Third input----------------------------")

    bst3 = BinarySearchTree()
    bst3.fromArray([1, 3, 4, 5, 6, 7, 8])

    print("MIN: " + str(bst3.min()))
    print(bst3.visitedNodes())
    print("MAX: " + str(bst3.max()))
    print(bst3.visitedNodes())
    bst4 = BinarySearchTree()
    bst4.fromArray([6393, 6574, -5715, -159, 5559, 6236, -5804, -111, 741, 3288, -184, 2417, 9536, -9516, -9373, -9676, -9529, 8485, -5496, -1228, -9724, -3432, 6605, -1219, -575, 6008, 3965, -4571, 6668, 4184, 4367, -6236, -3541, 5023, 9069, -6164, 118, -7990, -1996, -2638, -7740, -1475, -3658, 1420, 6356, 3138, 6539, -5215, 5516, 8992, 609, -7552, 9038, -9133, -8, 1459, -8600, -5075, -7939, 215, 4383, 1578, -7590, 1467, -2767, 1675, 9558, -8910, -2179, 9936, -9592, 3844, -9220, 5475, -8019, 5854, -8901, 9964, -3031, 547, -3924, -4855, 3862, 2, 4513, -7345, 3968, 6380, -7930, -6768, 5012, -7245, 6455, -11, 3157, 1650, -8915, 2131, -3932, -6472, -6043, -8703, -4300, 8236, 4318, -3201, -6284, 5367, -9315, -9454, 3954, -3193, -6895, 9604, 366, -5063, 1511, 7933, 1810, 1636, -5009, 6798, -8001, -6968, -9247, 2504, 7089, 9262, -991, -4315, -9983, 6529, 9680, -3847, -7407, -4503, 7272, -7322, 3391, 4355, -7748, 4143, 8161, 2192, 8264, -6155, 6472, -3413, 9819, -9176, -4960, 5433, -4743, 7938, -4264, 8060, -6988, -7158, -899, -7219, -9104, -342, 9114, -9678, -6588, -6107, -8267, -6629, 8045, -3840, -2528, -601, 831, 7484, -6784, 4501, -2015, -2211, -6341, 183, 128, 2550, 1502, 8043, 7911, 9316, -7462, -912, 3471, 5787, -7514, 2914, -8519, 5484, 9547, 1455, 6399, 9909, 4671, 3927, -5516, -7300, -573, 6218, 1949, -4278, -3720, -5404, -6850, -8937, -9107, 6078, 2226, -2439, -266, -3067, 411, -7961, 8559, 4872, -1764, -922, -6122, 7800, -133, -6805, -7875, 4249, -2074, 8405, -7227, -5365, 879, -993, -770, 8514, -5595, -1552, -6659, -7888, 8502, 9161, -212, -1395, -8301, 9781, 2819, -1224, 8029, -5521, 2937, -9332, -4014, 4488, 9051, 2741, 7788, 9880, 1526, 3024, 7422, -80, -3148, -7264, -3979, 3333, -9584, 6478, -4524, -5111, 4051, -1432, -7478, 9693, -7277, 3211, -38, -8224, -5626, 106, -9845, 8895, -9037, 3785, -2076, -7341, -9392, -2008, 7389, -9414, 4527, 5075, -6695, -678, 3699, -4543, 6767, 2086, -9210, 2447, 1133, 6166, -9464, 2809, 4040, 6437, -9945, -7947, -7631, 8019, 9879, -3902, -5510, -7901, 7197, 1236, 8765, 3245, 8038, 3629, 972, 8440, -1625, -2068, 8899, 1679, 930, -2959, -7685, -745, -4608, 8024, 3067, -4973, 9280, 8061, -1005, 6118, 5273, -5883, 8384, 1899, -9549, -1399, 2082, -7221, -4807, 3069, -8421, 8103, 9503, -8876, -3300, -2193, -9166, -2992, 3552, -992, 4511, -1735, -3566, -7114, -9815, 8593, 7239, 4954, -391, -2481, 8689, -9341, 5024, -5751, -2276, -1049, -2395, -1409, -8209, 8876, -1181, -124, -724, 7113, -2366, -8362, 3865, -554, -9186, 6588, 8846, -1629, 2939, -999, -6346, 2344, 9256, 6140, 4507, 8858, 5298, -2121, 4420, -2353, -4570, 7118, 4275, -5401, -8528, 5671, -9190, 4038, 421, -9515, -6326, -1251, -2341, -2574, -7395, -7538, 8628, -8472, 8466, 586, -4397, 7074, -755, -6132, 5805, 3063, -3807, -4649, -1741, 4658, -5718, 396, -4313, 8263, 4629, -7063, -5838, -4488, -2325, 9190, -5282, 6459, 9864, 7030, -9200, -9651, -8304, -2935, -4071, 7344, -4010, 4269, -8506, 7124, 9498, 715, -5973, 3312, -1685, -8236, 807, -9048, 6912, -782, -8146, -5578, -3647, -5840, -2304, -6528, -8582, 2674, 9373, -3239, -1906, -4801, -6384, -10000, -379, -9324, 8941, 4738, 4392, 5686, 1569, 9613, -609, 4765, -6652, 2429, -9446, 404, -6388, -7974, -640,
                    9846, -765, -7965, 4840, 9230, -6275, -5319, -4394, -852, 8199, 9419, -5505, -9185, 5674, -9970, -4536, 4457, -3806, 5028, 4554, 3031, -6231, -7797, -864, 2905, 5973, -7325, 692, 6788, 6784, -2716, 9146, 8664, 4794, 5394, -469, -7281, 9609, -4135, -6883, 4107, 9128, -4486, -437, -8447, -4830, -1166, 9931, 3137, 6707, 1357, -1048, 1221, -4662, 9531, -425, 2214, -5581, -2546, 9032, -4994, 7149, 5799, -1928, -3943, -2509, -8262, -5397, -1824, -325, 2627, 8859, 2682, 525, 8240, -4962, 3221, -7361, -5743, -401, 7960, -5251, -2924, -5143, 2250, 5274, -1238, 4716, -8929, 5815, 162, 9339, 6481, -1453, -8898, -2874, 4210, 153, -2087, -7426, 6165, 1841, 7878, -6200, -8685, 8468, 9956, 7806, 6082, 2918, -5531, 5651, -6342, 6154, -941, 455, -8809, -1114, -5162, -281, 9510, 9086, -3195, 5944, -5456, -2635, -7293, 8581, -7521, -8227, 7395, -9639, -2629, 146, 1403, 3757, -6781, -7557, -6270, -3183, -6593, 5288, -4133, -3359, -7589, -6390, -1496, -2814, -6440, -9272, 4653, -135, -4289, -7480, 1070, 5152, 8191, -8572, -493, 6259, -4751, -8350, -9437, -1845, 680, 1918, 8046, 4480, -7493, -2417, -208, -1847, 5986, -7128, -669, 1115, 917, -9385, -403, 1957, -4464, 5696, 2451, 9326, -2770, 1028, 2962, -5615, 7944, 9586, -227, -4841, 378, 6433, -8393, -5464, -9236, -2041, 610, -4306, 677, 5529, 6708, 4396, 6345, -9787, -2347, 2436, -6939, 5640, -9583, 5250, -9785, -2047, 5830, -9502, 1363, 8834, 9771, -5098, -6099, 6898, -9536, 3372, -4720, 2202, -355, 4962, 975, 5184, 2739, -270, 8309, 8177, 9143, -6691, -7805, -6544, 7466, 6534, -7897, 6970, 91, 7017, -4710, -147, 369, -8499, 8564, -7993, 3980, -3822, 6551, 6508, 661, -8848, 8271, 4409, -5650, -2442, 3499, -2257, -3525, -8467, -1536, -7780, 5589, 1807, -8159, -3049, -20, 8286, 3235, 55, 3093, 1136, -8737, -5651, 5359, -636, -1337, -3121, 5336, 2382, -6596, 379, 3139, -2799, 8000, -9237, -6431, 2264, -9538, 1222, -9270, -2205, -6318, 9477, -7684, -5234, -8223, -5336, 3567, -4063, -996, -5024, 2659, 4092, -1277, 1261, 4182, -8892, 1677, 2033, -2888, -3682, 6996, -3704, 3517, 4340, 8882, -9706, -9896, -9377, -4658, -1298, 2200, 7313, -4092, 2193, 9930, 1736, 8084, 2646, -3324, -7801, -8005, 8916, 7102, 9751, -3743, -3013, -9073, 7444, 8630, -2191, 3716, -8735, 1181, -2412, 189, -2788, -1975, -5337, 5886, 8911, 3197, -4915, -2089, -2326, -1070, -4499, -5296, 764, 2589, -7048, -6799, 6340, 400, 1834, 3681, -3200, 5287, 278, -5091, -631, 8599, 4929, 3289, -3956, 5539, -5530, -8433, 2877, 9512, -2056, -3701, 375, -2336, 8176, 4471, -7549, -5020, -3254, -549, -5591, 7256, 4673, 7864, 9984, -3348, 1540, -371, 5295, -8229, -7258, 7046, -695, 3442, 4894, -6374, -1035, 5795, 7765, 8518, -2050, -6836, -4260, 6611, -5146, 956, 4686, 9640, -1651, 9920, 8167, 3986, -5026, 8293, 6761, -5031, -5265, 8778, 3671, 9894, -302, 1720, 4809, -4121, 8181, -8644, 7647, -9548, -5575, 264, -463, 2617, -5696, -4547, -5841, 1195, 7145, 3658, -4175, 3660, -8413, 7523, 6296, 1257, -8249, -7499, -5894, -7392, -9091, -9840, 5933, -4279, 9689, 9249, 239, 208, -6130, -9059, 5510, 3930, 5038, 1794, 86, 3913, -8652, 4627, 1162, 7603, -6010, -3771, -6171, 9749, -596, -4889, 1970, 785, 9389, -6237, -4256, -5869, 4171, 7657, -3539, 4014, -8750, 2832, 1418, -5364])
    print(bst4.root.left.right.right.value)
    print(bst4.search(5559))


main()
